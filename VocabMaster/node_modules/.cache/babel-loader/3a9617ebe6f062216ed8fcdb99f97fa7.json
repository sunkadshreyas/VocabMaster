{"ast":null,"code":"var _jsxFileName = \"/home/shreyas/Desktop/Web/ReactApps/VocabMaster/vocabmaster/src/components/MyWords.js\";\nimport axios from 'axios';\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass MyWords extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      word: \"\",\n      meaning: \"\",\n      words: []\n    };\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.handleDelete = question => {\n      const options = {\n        headers: {\n          \"x-auth-token\": localStorage.getItem(\"token\"),\n          'Content-Type': 'application/json'\n        }\n      };\n      var currword = question;\n      console.log(question);\n      axios.post('/deleteword', {\n        currword\n      }, options).then(res => {\n        console.log(res);\n      });\n      window.location.reload(false);\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n      var word = this.state.word;\n      var meaning = this.state.meaning; // console.log(localStorage.getItem('token'))\n\n      const options = {\n        headers: {\n          \"x-auth-token\": localStorage.getItem(\"token\"),\n          'Content-Type': 'application/json'\n        }\n      };\n      axios.post('/addword', {\n        word,\n        meaning\n      }, options).then(response => {\n        console.log(response);\n      });\n      this.setState({\n        word: \"\",\n        meaning: \"\"\n      });\n      window.location.reload(false);\n    };\n  }\n\n  componentDidMount() {\n    const options = {\n      headers: {\n        \"x-auth-token\": localStorage.getItem(\"token\"),\n        'Content-Type': 'application/json'\n      }\n    }; // console.log(options.headers['x-auth-token']);\n\n    axios.get('/listwords', options).then(response => {\n      // console.log(response.data.listWords)\n      this.setState({\n        words: response.data.listWords\n      });\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"List of My words and their meanings\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: this.state.words.map(word => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [word.question, \" means \", word.correct_answer, /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: this.handleDelete(word.question),\n            children: \"x\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 29\n          }, this)]\n        }, word.question, true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: this.handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            name: \"word\",\n            value: this.state.word,\n            placeholder: \"Enter the word\",\n            onChange: this.handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            name: \"meaning\",\n            value: this.state.meaning,\n            placeholder: \"Enter the meaning of word\",\n            onChange: this.handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Add to my list\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default MyWords;\n/* \n\n  componentDidUpdate(){\n        const options = {\n            headers : {\n                \"x-auth-token\" : localStorage.getItem(\"token\"),\n                'Content-Type': 'application/json'\n            }\n        }\n        axios.get('/listwords', options)\n        .then(response => {\n            // console.log(response.data)\n            this.setState({\n                words : response.data\n            })\n        })\n    }\n*/","map":{"version":3,"sources":["/home/shreyas/Desktop/Web/ReactApps/VocabMaster/vocabmaster/src/components/MyWords.js"],"names":["axios","React","MyWords","Component","state","word","meaning","words","handleChange","event","setState","target","name","value","handleDelete","question","options","headers","localStorage","getItem","currword","console","log","post","then","res","window","location","reload","handleSubmit","preventDefault","response","componentDidMount","get","data","listWords","render","map","correct_answer"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport React from 'react';\n\nclass MyWords extends React.Component{\n    state = {\n        word : \"\",\n        meaning : \"\",\n        words : []\n    }\n    componentDidMount(){\n        const options = {\n            headers : {\n                \"x-auth-token\" : localStorage.getItem(\"token\"),\n                'Content-Type': 'application/json'\n            }\n        }\n        // console.log(options.headers['x-auth-token']);\n        axios.get('/listwords', options)\n        .then(response => {\n            // console.log(response.data.listWords)\n            this.setState({\n                words : response.data.listWords\n            })\n        })\n    }\n  \n    handleChange = (event) => {\n        this.setState({\n            [event.target.name] : event.target.value\n        });\n    }\n    handleDelete = (question) => {\n        const options = {\n            headers : {\n                \"x-auth-token\" : localStorage.getItem(\"token\"),\n                'Content-Type': 'application/json'\n            }\n        }\n        var currword = question\n        console.log(question)\n        axios.post('/deleteword', {currword}, options)\n        .then(res => {\n            console.log(res);\n        })\n        window.location.reload(false);\n    }\n    handleSubmit = event => {\n        event.preventDefault();\n        var word = this.state.word\n        var meaning = this.state.meaning\n        // console.log(localStorage.getItem('token'))\n        const options = {\n            headers : {\n                \"x-auth-token\" : localStorage.getItem(\"token\"),\n                'Content-Type': 'application/json'\n            }\n        }\n        axios.post('/addword',{word, meaning}, options)\n        .then(response => {\n            console.log(response)\n        })\n        this.setState({\n            word : \"\",\n            meaning : \"\"\n        })\n        window.location.reload(false);\n    }\n    render(){\n        return (\n            <div>\n                <div>List of My words and their meanings</div>\n                <div>\n                    {this.state.words.map(word => \n                        <div key={word.question}>\n                            {word.question} means {word.correct_answer}\n                            <button onClick={this.handleDelete(word.question)}>x</button>\n                        </div>\n                        )\n                    }\n                </div>\n                <form onSubmit={this.handleSubmit}>\n                    <div>\n                        <input \n                            name=\"word\"\n                            value={this.state.word}\n                            placeholder=\"Enter the word\"\n                            onChange={this.handleChange}\n                        />\n                    </div>\n                    <div>\n                        <input \n                            name=\"meaning\"\n                            value={this.state.meaning}\n                            placeholder=\"Enter the meaning of word\"\n                            onChange={this.handleChange}\n                        />\n                    </div>\n                    <button type=\"submit\">Add to my list</button>\n                </form>\n            </div>\n        );\n    }\n}\n\nexport default MyWords;\n\n/* \n\n  componentDidUpdate(){\n        const options = {\n            headers : {\n                \"x-auth-token\" : localStorage.getItem(\"token\"),\n                'Content-Type': 'application/json'\n            }\n        }\n        axios.get('/listwords', options)\n        .then(response => {\n            // console.log(response.data)\n            this.setState({\n                words : response.data\n            })\n        })\n    }\n*/"]},"metadata":{},"sourceType":"module"}